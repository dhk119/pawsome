<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.iei.member.model.dao.MemberDao">

	<insert id="insertMember">
    insert into member (member_email, member_nickname, member_pw, member_name, member_addr1, member_addr2, member_addr3, member_level, member_profile, enroll_date, login_type) 
    values
        (#{memberEmail},
        #{memberNickname},
        <if test="memberPw != null">            
        #{memberPw},
        </if>
        <if test="memberPw == null">            
        null,
        </if>
        #{memberName},
        #{memberAddr1},
        #{memberAddr2},
        #{memberAddr3},
        2,
        'member_img.png',
        sysdate,
        #{loginType})
	</insert>
	
	<select id="selectOneMember" resultType="member">
		select * from member where member_email=#{memberEmail}
	</select>
	
	<select id="selectMemberPet" resultType="pet">
		select * from pet where member_email=#{memberEmail}
	</select>
	
	<select id="checkEmail" resultType="int">
		select count(*) from member where member_email = #{memberEmail}
	</select>
	
	<select id="checkNickname" resultType="int">
		select count(*) from member where member_nickname = #{memberNickname}
	</select>
	<select id="totalCountMagnum">
		select count(*) from member
	</select>
	<select id="selectMemberListMagnum" resultType="member">
		select * from (select rownum as rnum, b.* from(SELECT MEMBER_EMAIL,MEMBER_NICKNAME,MEMBER_NAME,MEMBER_ADDR1,MEMBER_ADDR2,MEMBER_ADDR3,MEMBER_LEVEL,MEMBER_PROFILE,ENROLL_DATE,LOGIN_TYPE,MEMBER_PHONE from member order by ENROLL_DATE desc)b) where rnum BETWEEN #{start} and #{end}
	</select>
	<update id="updateMemberLevelMagnum">
		update member set member_level=#{memberLevel} where member_email=#{memberEmail}
	</update>
	<select id="searchTotalCountMemberMagnum" resultType="int">
		select count(*) from member where
		<choose>
			<when test="option==0"> 
				<choose>
					<when test="type.equals('all')">
						MEMBER_EMAIL like '%'||#{keyword}||'%' or MEMBER_NICKNAME like '%'||#{keyword}||'%' or MEMBER_NAME like '%'||#{keyword}||'%' or MEMBER_NAME like '%'||#{keyword}||'%' or MEMBER_NICKNAME like '%'||#{keyword}||'%' or MEMBER_addr1 like '%'||#{keyword}||'%' or MEMBER_addr2 like '%'||#{keyword}||'%' or MEMBER_addr3 like '%'||#{keyword}||'%' or LOGIN_TYPE like '%'||#{keyword}||'%' or member_phone like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('memberEmail')">
						MEMBER_EMAIL like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('nickname')">
						MEMBER_NICKNAME like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('name')">
						MEMBER_NAME like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('addrNum')">
						MEMBER_addr1 like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('address')">
						MEMBER_addr2 like '%'||#{keyword}||'%' or MEMBER_addr3 like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('loginType')">
						login_type like '%'||#{keyword}||'%'					
					</when>
					<when test="type.equals('phone')">
						MEMBER_PHONE like '%'||#{keyword}||'%'
					</when>
				</choose>
			</when>
			<otherwise>
				<choose>
					<when test="type.equals('all')">
						(MEMBER_EMAIL like '%'||#{keyword}||'%' or MEMBER_NICKNAME like '%'||#{keyword}||'%' or MEMBER_NAME like '%'||#{keyword}||'%' or MEMBER_NAME like '%'||#{keyword}||'%' or MEMBER_NICKNAME like '%'||#{keyword}||'%' or MEMBER_addr1 like '%'||#{keyword}||'%' or MEMBER_addr2 like '%'||#{keyword}||'%' or MEMBER_addr3 like '%'||#{keyword}||'%' or LOGIN_TYPE like '%'||#{keyword}||'%' or member_phone like '%'||#{keyword}||'%') and member_level=#{option}
					</when>
					<when test="type.equals('memberEmail')">
						MEMBER_EMAIL like '%'||#{keyword}||'%' and member_level=#{option}
					</when>
					<when test="type.equals('nickname')">
						MEMBER_NICKNAME like '%'||#{keyword}||'%' and member_level=#{option}
					</when>
					<when test="type.equals('name')">
						MEMBER_NAME like '%'||#{keyword}||'%' and member_level=#{option}
					</when>
					<when test="type.equals('addrNum')">
						MEMBER_addr1 like '%'||#{keyword}||'%' and member_level=#{option}
					</when>
					<when test="type.equals('address')">
						(MEMBER_addr2 like '%'||#{keyword}||'%' or MEMBER_addr3 like '%'||#{keyword}||'%') and member_level=#{option}
					</when>
					<when test="type.equals('loginType')">
						login_type like '%'||#{keyword}||'%' and member_level=#{option}					
					</when>
					<when test="type.equals('phone')">
						MEMBER_PHONE like '%'||#{keyword}||'%' and member_level=#{option}
					</when>
				</choose>
			</otherwise>
		</choose>
	</select>
	<select id="searchMemberListMagnum" resultType="member">
		select * from (select rownum as rnum, b.* from(SELECT MEMBER_EMAIL,MEMBER_NICKNAME,MEMBER_NAME,MEMBER_ADDR1,MEMBER_ADDR2,MEMBER_ADDR3,MEMBER_LEVEL,MEMBER_PROFILE,ENROLL_DATE,LOGIN_TYPE,MEMBER_PHONE from member where
		<choose>
			<when test="option==0"> 
				<choose>
					<when test="type.equals('all')">
						MEMBER_EMAIL like '%'||#{keyword}||'%' or MEMBER_NICKNAME like '%'||#{keyword}||'%' or MEMBER_NAME like '%'||#{keyword}||'%' or MEMBER_NAME like '%'||#{keyword}||'%' or MEMBER_NICKNAME like '%'||#{keyword}||'%' or MEMBER_addr1 like '%'||#{keyword}||'%' or MEMBER_addr2 like '%'||#{keyword}||'%' or MEMBER_addr3 like '%'||#{keyword}||'%' or LOGIN_TYPE like '%'||#{keyword}||'%' or member_phone like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('memberEmail')">
						MEMBER_EMAIL like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('nickname')">
						MEMBER_NICKNAME like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('name')">
						MEMBER_NAME like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('addrNum')">
						MEMBER_addr1 like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('address')">
						MEMBER_addr2 like '%'||#{keyword}||'%' or MEMBER_addr3 like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('loginType')">
						login_type like '%'||#{keyword}||'%'					
					</when>
					<when test="type.equals('phone')">
						MEMBER_PHONE like '%'||#{keyword}||'%'
					</when>
				</choose>
			</when>
			<otherwise>
				<choose>
					<when test="type.equals('all')">
						(MEMBER_EMAIL like '%'||#{keyword}||'%' or MEMBER_NICKNAME like '%'||#{keyword}||'%' or MEMBER_NAME like '%'||#{keyword}||'%' or MEMBER_NAME like '%'||#{keyword}||'%' or MEMBER_NICKNAME like '%'||#{keyword}||'%' or MEMBER_addr1 like '%'||#{keyword}||'%' or MEMBER_addr2 like '%'||#{keyword}||'%' or MEMBER_addr3 like '%'||#{keyword}||'%' or LOGIN_TYPE like '%'||#{keyword}||'%' or member_phone like '%'||#{keyword}||'%') and member_level=#{option}
					</when>
					<when test="type.equals('memberEmail')">
						MEMBER_EMAIL like '%'||#{keyword}||'%' and member_level=#{option}
					</when>
					<when test="type.equals('nickname')">
						MEMBER_NICKNAME like '%'||#{keyword}||'%' and member_level=#{option}
					</when>
					<when test="type.equals('name')">
						MEMBER_NAME like '%'||#{keyword}||'%' and member_level=#{option}
					</when>
					<when test="type.equals('addrNum')">
						MEMBER_addr1 like '%'||#{keyword}||'%' and member_level=#{option}
					</when>
					<when test="type.equals('address')">
						(MEMBER_addr2 like '%'||#{keyword}||'%' or MEMBER_addr3 like '%'||#{keyword}||'%') and member_level=#{option}
					</when>
					<when test="type.equals('loginType')">
						login_type like '%'||#{keyword}||'%' and member_level=#{option}					
					</when>
					<when test="type.equals('phone')">
						MEMBER_PHONE like '%'||#{keyword}||'%' and member_level=#{option}
					</when>
				</choose>
			</otherwise>
		</choose>
		order by ENROLL_DATE desc)b) where rnum BETWEEN #{start} and #{end}
	</select>
	<select id="searchTotalCountMemberOption" resultType="int">
		select count(*) from member where member_level=#{option}
	</select>
	<select id="searchMemberListOption" resultType="member">
		select * from (select rownum as rnum, b.* from(SELECT MEMBER_EMAIL,MEMBER_NICKNAME,MEMBER_NAME,MEMBER_ADDR1,MEMBER_ADDR2,MEMBER_ADDR3,MEMBER_LEVEL,MEMBER_PROFILE,ENROLL_DATE,LOGIN_TYPE,MEMBER_PHONE from member where member_level=#{option} order by ENROLL_DATE desc)b) where rnum BETWEEN #{start} and #{end}
	</select>
	<select id="searchTotalCountPetMagnum" resultType="int">
		select count(*) from pet where
		<choose>
			<when test="option==0"> 
				<choose>
					<when test="type.equals('all')">
						PET_NAME like '%'||#{keyword}||'%' or PET_BREED like '%'||#{keyword}||'%' or MEMBER_EMAIL like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('name')">
						PET_NAME like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('breed')">
						PET_breed like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('memberEmail')">
						MEMBER_EMAIL like '%'||#{keyword}||'%'
					</when>
				</choose>
			</when>
			<otherwise>
				<choose>
					<when test="type.equals('all')">
						(PET_NAME like '%'||#{keyword}||'%' or PET_BREED like '%'||#{keyword}||'%' or MEMBER_EMAIL like '%'||#{keyword}||'%') and PET_CLASSES=#{option}
					</when>
					<when test="type.equals('name')">
						PET_NAME like '%'||#{keyword}||'%' and PET_CLASSES=#{option}
					</when>
					<when test="type.equals('breed')">
						PET_breed like '%'||#{keyword}||'%' and PET_CLASSES=#{option}
					</when>
					<when test="type.equals('memberEmail')">
						MEMBER_EMAIL like '%'||#{keyword}||'%' and PET_CLASSES=#{option}
					</when>	
				</choose>
			</otherwise>
		</choose>
	</select>
	<select id="searchPetListMagnum" resultType="pet">
		select * from (select rownum as rnum, b.* from(SELECT pet_no,pet_name,pet_classes,pet_breed,to_char(pet_birth,'yyyy-mm-dd') as pet_birth,pet_gender,neutering,pet_profile,pet_weight,member_email from pet where
		<choose>
			<when test="option==0"> 
				<choose>
					<when test="type.equals('all')">
						PET_NAME like '%'||#{keyword}||'%' or PET_BREED like '%'||#{keyword}||'%' or MEMBER_EMAIL like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('name')">
						PET_NAME like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('breed')">
						PET_breed like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('memberEmail')">
						MEMBER_EMAIL like '%'||#{keyword}||'%'
					</when>
				</choose>
			</when>
			<otherwise>
				<choose>
					<when test="type.equals('all')">
						(PET_NAME like '%'||#{keyword}||'%' or PET_BREED like '%'||#{keyword}||'%' or MEMBER_EMAIL like '%'||#{keyword}||'%') and PET_CLASSES=#{option}
					</when>
					<when test="type.equals('name')">
						PET_NAME like '%'||#{keyword}||'%' and PET_CLASSES=#{option}
					</when>
					<when test="type.equals('breed')">
						PET_breed like '%'||#{keyword}||'%' and PET_CLASSES=#{option}
					</when>
					<when test="type.equals('memberEmail')">
						MEMBER_EMAIL like '%'||#{keyword}||'%' and PET_CLASSES=#{option}
					</when>	
				</choose>
			</otherwise>
		</choose>
		order by pet_birth desc)b) where rnum BETWEEN #{start} and #{end}
	</select>
	<select id="searchTotalCountPetOption" resultType="int">
		select count(*) from pet where PET_CLASSES=#{option}
	</select>
	<select id="searchPetListOption" resultType="pet">
		select * from (select rownum as rnum, b.* from(SELECT pet_no,pet_name,pet_classes,pet_breed,to_char(pet_birth,'yyyy-mm-dd') as pet_birth,pet_gender,neutering,pet_profile,pet_weight,member_email from pet where PET_CLASSES=#{option} order by 1 desc)b) where rnum BETWEEN #{start} and #{end}
	</select>
	<select id="petChartClass" resultType="chartData">
		select pet_classes as key, count(*) as count from pet group by pet_classes
	</select>
	<select id="petChartBreedDog" resultType="chartData">
		select pet_breed as key, count(*) as count from pet where pet_classes=1 group by pet_breed
	</select>
	<select id="petChartBreedCat" resultType="chartData">
		select pet_breed as key, count(*) as count from pet where pet_classes=2 group by pet_breed
	</select>
	<select id="petChartGender" resultType="chartData">
		select pet_gender as key, count(*) as count from pet where pet_classes=1 group by pet_gender
	</select>
	<insert id="insertPet">
	  	insert into pet values(pet_seq.nextval, #{petName}, #{petClasses}, #{petBreed}, #{petBirth}, #{petGender}, #{neutering}, #{petProfile}, #{petWeight}, #{memberEmail})
	</insert>
	
	<update id="updatePet">
	    update pet
	    set pet_name = #{petName},
	        pet_classes = #{petClasses},
	        pet_breed = #{petBreed},
	        pet_gender = #{petGender},
	        pet_weight = #{petWeight},
	        pet_birth = TO_DATE(#{petBirth}, 'YYYY-MM-DD'),
	        neutering = #{neutering},
	        pet_profile = #{petProfile}
	    where pet_no = #{petNo}
	</update>
	
	<select id="selectOnePet" resultType="pet">
		select * from pet where pet_no = #{petNo}
	</select>
	<select id="selectOneEmail" resultType="String">
		select login_type from member where member_email=#{memberEmail} and member_name=#{memberName}
	</select>
	<update id="changePassword">
		update member set member_pw = #{memberPw} where member_email = #{memberEmail}
	</update>
	<update id="updateMember">
  		update 
  			member 
  		set 
  			member_nickname=#{memberNickname}, 
  			member_name=#{memberName}, 
  			member_addr1=#{memberAddr1}, 
  			member_addr2=#{memberAddr2}, 
  			member_addr3=#{memberAddr3}, 
  			member_profile=#{memberProfile},
  			member_phone=#{memberPhone}
  		where
  			member_email=#{memberEmail}
  	</update>  	

  	<select id="selectSchedule" resultType="schedule">
  		select * from schedule where member_email=#{memberEmail}
  	</select>

  	<select id="totalPetCountMagnum" resultType="int">
  		select count(*) from pet
  	</select>
  	
  	<select id="selectPetListMagnum" resultType="pet">
  		select * from (select rownum as rnum, b.* from(SELECT pet_no,pet_name,pet_classes,pet_breed,to_char(pet_birth,'yyyy-mm-dd') as pet_birth,pet_gender,neutering,pet_profile,pet_weight,member_email from pet order by pet_birth desc)b) where rnum BETWEEN #{start} and #{end}
  	</select>
  	
  	<insert id="insertSchedule">
  		insert into SCHEDULE values(SCHEDULE_SEQ.NEXTVAL,#{dayTitle},#{dayStart},#{dayEnd},#{dayContent},#{memberEmail})
  	</insert>
  	
  	<delete id="deleteSchedule">
  		delete from SCHEDULE where day_no = #{dayNo}
  	</delete>
  	
  	<update id="updateSchedule">
  		update SCHEDULE set day_title = #{dayTitle}, day_start = #{dayStart}, day_end =#{dayEnd}, day_content = #{dayContent}
  		where member_email = #{memberEmail}
  	</update>
  	
  	<delete id="deleteMember">
  		delete from member where member_email = #{memberEmail}
  	</delete>
	
	<delete id="deletePet">
		delete from pet where pet_no = #{petNo}
	</delete>

</mapper>