<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.iei.market.model.dao.MarketDao">
	<!-- 승환 -->
	<select id="totalCountMagnum" resultType="int">
		select count(*) from product
	</select>
	<insert id="insertProduct">
		insert into product values (product_seq.nextval,#{productName},#{typeCategory},#{mainCategory},#{productPrice},#{productThumb},#{productDetail},sysdate,#{productShow},#{memberEmail})
	</insert>
	<select id="selectProductListMagnum" resultType="product">
		select * from (select rownum as rnum, b.* from(SELECT * from product order by product_no desc)b) where rnum BETWEEN #{start} and #{end}
	</select>
	<update id="updateShow">
		update product set product_show=#{productShow} where product_no=#{productNo}
	</update>
	<select id="selectOneProductMagnum" resultType="product">
		select product_name, type_category, main_category, product_price, product_thumb, product_detail, product_show, member_email from product where product_no=#{productNo}
	</select>
	<update id="updateProduct">
		update product set product_name=#{productName},type_category=#{typeCategory},main_category=#{mainCategory},product_price=#{productPrice},product_thumb=#{productThumb},product_detail=#{productDetail}, product_show=#{productShow} where product_no=#{productNo}
	</update>
	<delete id="deleteProduct">
		delete from product where product_no=#{productNo}
	</delete>
	<select id="totalQnaCountMagnum" resultType="int">
		select count(*) from qna
		<choose>
			<when test="answer==true">
			where qna_no in (select qna_answer.qna_no from qna_answer)
			</when>
			<otherwise>
			where qna_no not in (select qna_answer.qna_no from qna_answer)
			</otherwise>
		</choose>
	</select>
	<select id="selectQnaListMagnum" resultType="qna">
		select * from (select rownum as rnum, b.* from(SELECT qna_no, product_no, qna_type, qna_title, qna_public, qna_reg_date, qna_writer,(select product.product_name from product where qna.product_no = product.product_no) as product_name from qna
		<choose>
			<when test="answer==true">
				where qna_no in (select qna_answer.qna_no from qna_answer)
			</when>
			<otherwise>
				where qna_no not in (select qna_answer.qna_no from qna_answer)
			</otherwise>
		</choose>
		order by qna_no desc)b) where rnum BETWEEN #{start} and #{end}
	</select>
	<select id="selectOneQnaMagnum" resultType="qna">
		select product_no, qna_type, qna_title, qna_content, qna_reg_date, qna_writer, qna_answer_content, qna_answer_reg_date, qna_answer_writer from qna left join qna_answer using(qna_no) where qna_no=#{qnaNo}
	</select>
	<select id="searchTotalCountMagnum" resultType="int">
		select count(*) from product where
		<choose>
			<when test="option.equals('A')">
				<choose>
					<when test="type.equals('all')">
						product_name like '%'||#{keyword}||'%' or main_category like '%'||#{keyword}||'%' or product_price like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('name')">
						product_name like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('category')">
						main_category like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('price')">
						product_price like '%'||#{keyword}||'%'
					</when>
				</choose>
			</when>
			<otherwise>
				<choose>
					<when test="type.equals('all')">
						(product_name like '%'||#{keyword}||'%' or main_category like '%'||#{keyword}||'%' or product_price like '%'||#{keyword}||'%')and product_show=#{option}
					</when>
					<when test="type.equals('name')">
						product_name like '%'||#{keyword}||'%' and product_show=#{option}
					</when>
					<when test="type.equals('category')">
						main_category like '%'||#{keyword}||'%' and product_show=#{option}
					</when>
					<when test="type.equals('price')">
						product_price like '%'||#{keyword}||'%' and product_show=#{option}
					</when>
				</choose>
			</otherwise>
		</choose>
	</select>
	<select id="searchProductListMagnum" resultType="product">
		select * from (select rownum as rnum, b.* from(SELECT * from product where
		<choose>
			<when test="option.equals('A')">
				<choose>
					<when test="type.equals('all')">
						product_name like '%'||#{keyword}||'%' or main_category like '%'||#{keyword}||'%' or product_price like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('name')">
						product_name like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('category')">
						main_category like '%'||#{keyword}||'%'
					</when>
					<when test="type.equals('price')">
						product_price like '%'||#{keyword}||'%'
					</when>
				</choose>
			</when>
			<otherwise>
				<choose>
					<when test="type.equals('all')">
						(product_name like '%'||#{keyword}||'%' or main_category like '%'||#{keyword}||'%' or product_price like '%'||#{keyword}||'%')and product_show=#{option}
					</when>
					<when test="type.equals('name')">
						product_name like '%'||#{keyword}||'%' and product_show=#{option}
					</when>
					<when test="type.equals('category')">
						main_category like '%'||#{keyword}||'%' and product_show=#{option}
					</when>
					<when test="type.equals('price')">
						product_price like '%'||#{keyword}||'%' and product_show=#{option}
					</when>
				</choose>
			</otherwise>
		</choose>
		order by product_no desc)b) where rnum BETWEEN #{start} and #{end}
	</select>
	<select id="searchTotalCountOption" resultType="int">
		select count(*) from product where product_show=#{option}
	</select>
	<select id="searchProductListOption" resultType="product">
		select * from (select rownum as rnum, b.* from(SELECT * from product where product_show=#{option} order by product_no desc)b) where rnum BETWEEN #{start} and #{end}
	</select>
	<select id="searchTotalCountQnaMagnum" resultType="int">
		select count(*) from qna join product using(product_no) where
		<choose>
			<when test="answer==true">
				<choose>
					<when test="option==0">
						<choose>
							<when test="type.equals('all')">
								(PRODUCT_NO like '%'||#{keyword}||'%' or product_name like '%'||#{keyword}||'%' or qna_title like '%'||#{keyword}||'%' or qna.QNA_WRITER like '%'||#{keyword}||'%')
							</when>
							<when test="type.equals('productNo')">
								PRODUCT_NO like '%'||#{keyword}||'%'
							</when>
							<when test="type.equals('productName')">
								product_name like '%'||#{keyword}||'%'
							</when>
							<when test="type.equals('title')">
								qna_title like '%'||#{keyword}||'%'
							</when>
							<when test="type.equals('memberEmail')">
								qna.QNA_WRITER like '%'||#{keyword}||'%'
							</when>
						</choose>
					</when>
					<otherwise>
						<choose>
							<when test="type.equals('all')">
								(PRODUCT_NO like '%'||#{keyword}||'%' or product_name like '%'||#{keyword}||'%' or qna_title like '%'||#{keyword}||'%' or qna.QNA_WRITER like '%'||#{keyword}||'%')
							</when>
							<when test="type.equals('productNo')">
								PRODUCT_NO like '%'||#{keyword}||'%' and QNA_TYPE=#{option}
							</when>
							<when test="type.equals('productName')">
								product_name like '%'||#{keyword}||'%' and QNA_TYPE=#{option}
							</when>
							<when test="type.equals('title')">
								qna_title like '%'||#{keyword}||'%' and QNA_TYPE=#{option}
							</when>
							<when test="type.equals('memberEmail')">
								qna.QNA_WRITER like '%'||#{keyword}||'%' and QNA_TYPE=#{option}
							</when>
						</choose>
					</otherwise>
				</choose>
				and qna_no in (select qna_answer.qna_no from qna_answer)
			</when>
			<otherwise>
				<choose>
					<when test="option==0">
						<choose>
							<when test="type.equals('all')">
								(PRODUCT_NO like '%'||#{keyword}||'%' or product_name like '%'||#{keyword}||'%' or qna_title like '%'||#{keyword}||'%' or qna.QNA_WRITER like '%'||#{keyword}||'%')
							</when>
							<when test="type.equals('productNo')">
								PRODUCT_NO like '%'||#{keyword}||'%'
							</when>
							<when test="type.equals('productName')">
								product_name like '%'||#{keyword}||'%'
							</when>
							<when test="type.equals('title')">
								qna_title like '%'||#{keyword}||'%'
							</when>
							<when test="type.equals('memberEmail')">
								qna.QNA_WRITER like '%'||#{keyword}||'%'
							</when>
						</choose>
					</when>
					<otherwise>
						<choose>
							<when test="type.equals('all')">
								(PRODUCT_NO like '%'||#{keyword}||'%' or product_name like '%'||#{keyword}||'%' or qna_title like '%'||#{keyword}||'%' or qna.QNA_WRITER like '%'||#{keyword}||'%')
							</when>
							<when test="type.equals('productNo')">
								PRODUCT_NO like '%'||#{keyword}||'%' and QNA_TYPE=#{option}
							</when>
							<when test="type.equals('productName')">
								product_name like '%'||#{keyword}||'%' and QNA_TYPE=#{option}
							</when>
							<when test="type.equals('title')">
								qna_title like '%'||#{keyword}||'%' and QNA_TYPE=#{option}
							</when>
							<when test="type.equals('memberEmail')">
								qna.QNA_WRITER like '%'||#{keyword}||'%' and QNA_TYPE=#{option}
							</when>
						</choose>
					</otherwise>
				</choose>
				and qna_no not in (select qna_answer.qna_no from qna_answer)
			</otherwise>
		</choose>
	</select>
	<select id="searchQnaListMagnum" resultType="qna">
		select * from (select rownum as rnum, b.* from(SELECT qna_no, product_no, qna_type, qna_title, qna_public, qna_reg_date, qna_writer, product.product_name from qna join product using(product_no) where
		<choose>
			<when test="answer==true">
				<choose>
					<when test="option==0">
						<choose>
							<when test="type.equals('all')">
								(PRODUCT_NO like '%'||#{keyword}||'%' or product_name like '%'||#{keyword}||'%' or qna_title like '%'||#{keyword}||'%' or qna.QNA_WRITER like '%'||#{keyword}||'%')
							</when>
							<when test="type.equals('productNo')">
								PRODUCT_NO like '%'||#{keyword}||'%'
							</when>
							<when test="type.equals('productName')">
								product_name like '%'||#{keyword}||'%'
							</when>
							<when test="type.equals('title')">
								qna_title like '%'||#{keyword}||'%'
							</when>
							<when test="type.equals('memberEmail')">
								qna.QNA_WRITER like '%'||#{keyword}||'%'
							</when>
						</choose>
					</when>
					<otherwise>
						<choose>
							<when test="type.equals('all')">
								(PRODUCT_NO like '%'||#{keyword}||'%' or product_name like '%'||#{keyword}||'%' or qna_title like '%'||#{keyword}||'%' or qna.member_email like '%'||#{keyword}||'%')
							</when>
							<when test="type.equals('productNo')">
								PRODUCT_NO like '%'||#{keyword}||'%' and QNA_TYPE=#{option}
							</when>
							<when test="type.equals('productName')">
								product_name like '%'||#{keyword}||'%' and QNA_TYPE=#{option}
							</when>
							<when test="type.equals('title')">
								qna_title like '%'||#{keyword}||'%' and QNA_TYPE=#{option}
							</when>
							<when test="type.equals('memberEmail')">
								qna.member_email like '%'||#{keyword}||'%' and QNA_TYPE=#{option}
							</when>
						</choose>
					</otherwise>
				</choose>
				and qna_no in (select qna_answer.qna_no from qna_answer)
			</when>
			<otherwise>
				<choose>
					<when test="option==0">
						<choose>
							<when test="type.equals('all')">
								(PRODUCT_NO like '%'||#{keyword}||'%' or product_name like '%'||#{keyword}||'%' or qna_title like '%'||#{keyword}||'%' or qna.QNA_WRITER like '%'||#{keyword}||'%')
							</when>
							<when test="type.equals('productNo')">
								PRODUCT_NO like '%'||#{keyword}||'%'
							</when>
							<when test="type.equals('productName')">
								product_name like '%'||#{keyword}||'%'
							</when>
							<when test="type.equals('title')">
								qna_title like '%'||#{keyword}||'%'
							</when>
							<when test="type.equals('memberEmail')">
								qna.QNA_WRITER like '%'||#{keyword}||'%'
							</when>
						</choose>
					</when>
					<otherwise>
						<choose>
							<when test="type.equals('all')">
								(PRODUCT_NO like '%'||#{keyword}||'%' or product_name like '%'||#{keyword}||'%' or qna_title like '%'||#{keyword}||'%' or qna.QNA_WRITER like '%'||#{keyword}||'%')
							</when>
							<when test="type.equals('productNo')">
								PRODUCT_NO like '%'||#{keyword}||'%' and QNA_TYPE=#{option}
							</when>
							<when test="type.equals('productName')">
								product.product_name like '%'||#{keyword}||'%' and QNA_TYPE=#{option}
							</when>
							<when test="type.equals('title')">
								qna_title like '%'||#{keyword}||'%' and QNA_TYPE=#{option}
							</when>
							<when test="type.equals('memberEmail')">
								qna.QNA_WRITER like '%'||#{keyword}||'%' and QNA_TYPE=#{option}
							</when>
						</choose>
					</otherwise>
				</choose>
				and qna_no not in (select qna_answer.qna_no from qna_answer)
			</otherwise>
		</choose>
		order by qna_no desc)b) where rnum BETWEEN #{start} and #{end}
	</select>
	<select id="searchTotalCountQnaOption" resultType="int">
		select count(*) from qna where qna_type=#{option}
		<choose>
			<when test="answer==true">
				and qna_no in (select qna_answer.qna_no from qna_answer)
			</when>
			<otherwise>
				and qna_no not in (select qna_answer.qna_no from qna_answer)
			</otherwise>
		</choose>
	</select>
	<select id="searchQnaListOption" resultType="qna">
		select * from (select rownum as rnum, b.* from(SELECT qna_no, product_no, qna_type, qna_title, qna_public, qna_reg_date, qna_writer, product.product_name from qna join product using(product_no) where qna_type=#{option}
		<choose>
			<when test="answer==true">
				and qna_no in (select qna_answer.qna_no from qna_answer)
			</when>
			<otherwise>
				and qna_no not in (select qna_answer.qna_no from qna_answer)
			</otherwise>
		</choose>
		order by qna_no desc)b) where rnum BETWEEN #{start} and #{end}
	</select>


	<!-- 원희 -->
	<select id="totalCount" resultType="int">
		select count(*) from product where product_show='Y'
		<if test= "typeCategory!=0">
			and type_category=#{typeCategory}
		</if>
		<if test= "mainCategory!='all'">
		 	and main_category=#{mainCategory}
		</if>
	</select>
	<select id="selectProductList" resultType="product">
		select * from
			(select rownum as rnum, p.* from
				(select product_no, product_name, product_price, product_thumb from product
					where product_show='Y'
					<if test= "typeCategory!=0">
						and type_category=#{typeCategory}
					</if>
					<if test= "mainCategory!='all'">
					 	and main_category=#{mainCategory}
					</if>
					<if test= "filterType==1"> 
					 	order by product_no desc
					</if>
					<if test= "filterType==2"> 
					 	order by product_price, product_no desc
					</if>
					<if test= "filterType==3"> 
					 	order by product_price desc, product_no desc
					</if>
					)p)
		where rnum between #{start} and #{end}
	</select>
	<select id="isLike" resultType="int">
		select count(*) from product_like where product_no=#{productNo} and member_email=#{loginEmail}
	</select>
	<select id="selectOneProduct" resultType="product">
		select product_no, product_name, type_category, main_category, product_price, product_thumb, product_detail from product where product_no=#{productNo}
	</select>
	<insert id="insertLikePush">
		insert into product_like values(#{productNo}, #{memberEmail})
	</insert>
<!-- Q&A -->
	<insert id="insertQna">
		insert into qna values(qna_seq.nextval,#{productNo},#{qnaType},#{qnaTitle},#{qnaContent},#{qnaPublic},sysdate,#{qnaWriter})
	</insert>
	<select id="totalQnaCount" resultType="int">
		select count(*) from qna where product_no=#{productNo}
	</select>
	<select id="selectQnaList" resultType="qna">
		select * from
			(select rownum as rnum, q.* from
				(select qna_no,qna_type,qna_title,qna_content,qna_public,to_char(qna_reg_date,'YYYY-MM-DD hh24:mm:ss') as qna_reg_date,qna_writer
				,qna_answer_content,to_char(qna_answer_reg_date,'YYYY-MM-DD hh24:mm:ss') as qna_answer_reg_date from qna left join qna_answer using(qna_no) 
				where product_no=#{productNo} order by qna_no desc) q )
		where rnum between #{start} and #{end}
	</select>
	<select id="selectQna" resultType="qna">
		select qna_type,qna_title,qna_content,qna_public
		,qna_answer_content,to_char(qna_answer_reg_date,'YYYY-MM-DD hh24:mm:ss') as qna_answer_reg_date from qna left join qna_answer using(qna_no)
		where qna_no=#{qnaNo}
	</select>
	<update id="updateQna">
		update qna set qna_type=#{qnaType},qna_title=#{qnaTitle},qna_content=#{qnaContent},qna_public=#{qnaPublic} where qna_no=#{qnaNo}
	</update>
	<delete id="deleteQna">
		delete from qna where qna_no=#{qnaNo}
	</delete>
	<insert id="insertQnaAnswer">
		insert into qna_answer values(qna_answer_seq.nextval, #{qnaNo}, #{qnaAnswerContent}, sysdate, #{qnaAnswerWriter})
	</insert>
	<update id="updateQnaAnswer">
		update qna_answer set qna_answer_content=#{qnaAnswerContent} where qna_no=#{qnaNo}
	</update>
	<delete id="deleteQnaAnswer">
		delete from qna_answer where qna_no=#{qnaNo}
	</delete>
<!-- 장바구니 -->
	<select id="searchCart" resultType="int">
		select count(*) from cart where member_email=#{memberEmail} and product_no=#{productNo}
	</select>
	<insert id="insertCart">
		insert into cart values(cart_seq.nextval,#{productNo},#{productCartCount},#{memberEmail})
	</insert>
	<select id="selectCartList" resultType="cart">
		select cart_no,product_no,product_cart_count,product_name,product_price,product_thumb from
			(select * from cart where member_email=#{memberEmail})c
		left join product using(product_no) order by 1
	</select>
	<update id="updateProductCount">
		update cart set product_cart_count=product_cart_count + #{productCartCount} where member_email=#{memberEmail} and product_no=#{productNo}
	</update>
	<delete id="deleteCart">
		delete from cart where cart_no=#{cartNo}
	</delete>
<!-- 결제 -->
	<select id="selectPayList" resultType="cart">
		select cart_no,product_no,product_cart_count,product_name,product_price,product_thumb from
			(select * from cart where cart_no=#{cartNo})c
		left join product using(product_no)
	</select>
	<select id="selectPayer" resultType="member">
		select member_name, member_addr1, member_addr2, member_addr3 from member where member_email=#{memberEmail}
	</select>
	<insert id="insertPayment">
		insert into pay values(#{payUid},#{totalPrice},sysdate,#{payAddr1},#{payAddr2},#{payAddr3},#{payName},1,#{memberEmail})
	</insert>
	<insert id="insertBuyList">
		insert into buy_list values(buy_list_seq.nextval, #{cart.productNo}, #{pay.payUid}, #{cart.productCartCount}, #{pay.memberEmail}, 1)
	</insert>
	<delete id="payDeleteCart">
		delete from cart where cart_no=#{payCartNo}
	</delete>
	<select id="selectPayCartList" resultType="cart">
		select product_no, product_cart_count from cart where cart_no=#{payCartNo}
	</select>
	<select id="selectAllBuyList" resultType="buyList">
		select * from
			(select rownum as rnum, t.* from
				(select b.buy_no, b.pay_uid, b.product_no, b.buy_count, b.member_email, b.buy_state, p.product_thumb, p.product_name, p.product_price from
					(select * from buy_list where member_email=#{loginEmail})b 
					left join product p on b.product_no = p.product_no order by 1 desc
				)t
			)
		where rnum between #{start} and #{end}
	</select>
	<select id="payTotalCount" resultType="int">
		select count(*) from buy_list where member_email=#{loginEmail}
	</select>
	<select id="selectOnePay" resultType="pay">
		select * from pay where pay_uid=#{payUid}
	</select>
	
	<delete id="deleteLike">
		delete from product_like where product_no=#{product.productNo} and member_email=#{loginEmail}
	</delete>
	<insert id="insertLike">
		insert into	product_like values(#{product.productNo},#{loginEmail})
	</insert>
	
<!-- 정원 -->
<!-- 마이페이지 구매내역 -->
	<resultMap id="buyListMap" type="kr.co.iei.market.model.dto.BuyListDTO">
        <result property="buyNo" column="buy_no"/>
        <result property="productNo" column="product_no"/>
        <result property="payUid" column="pay_uid"/>
        <result property="buyCount" column="buy_count"/>
        <result property="memberEmail" column="member_email"/>
        <result property="buyState" column="buy_state"/>

        <!-- 상품 정보 매핑 -->
        <association property="product" javaType="kr.co.iei.market.model.dto.ProductDTO">
            <result property="productNo" column="product_no"/>
            <result property="productName" column="product_name"/>
            <result property="typeCategory" column="type_category"/>
            <result property="mainCategory" column="main_category"/>
            <result property="productPrice" column="product_price"/>
            <result property="productThumb" column="product_thumb"/>
            <result property="productDetail" column="product_detail"/>
            <result property="productShow" column="product_show"/>
        </association>

        <!-- 결제 정보 매핑 -->
        <association property="pay" javaType="kr.co.iei.market.model.dto.PayDTO">
            <result property="payUid" column="pay_uid"/>
            <result property="totalPrice" column="total_price"/>
            <result property="payDate" column="pay_date"/>
            <result property="payAddr1" column="pay_addr1"/>
            <result property="payAddr2" column="pay_addr2"/>
            <result property="payAddr3" column="pay_addr3"/>
            <result property="payName" column="pay_name"/>
            <result property="payState" column="pay_state"/>
        </association>
    </resultMap>

    <select id="selectBuyList" resultMap="buyListMap">
        SELECT b.*, p.*, pay.*
        FROM buy_list b
        JOIN product p ON b.product_no = p.product_no
        JOIN pay pay ON b.pay_uid = pay.pay_uid
        WHERE b.member_email = #{memberEmail}
    </select>
	
</mapper>
